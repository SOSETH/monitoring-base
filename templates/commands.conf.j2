/* Command objects */

object NotificationCommand "mail-host-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-host-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    HOSTSTATE = "$host.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    HOSTOUTPUT = "$host.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object NotificationCommand "mail-service-notification" {
  import "plugin-notification-command"

  command = [ SysconfDir + "/icinga2/scripts/mail-service-notification.sh" ]

  env = {
    NOTIFICATIONTYPE = "$notification.type$"
    SERVICEDESC = "$service.name$"
    HOSTALIAS = "$host.display_name$"
    HOSTADDRESS = "$address$"
    SERVICESTATE = "$service.state$"
    LONGDATETIME = "$icinga.long_date_time$"
    SERVICEOUTPUT = "$service.output$"
    NOTIFICATIONAUTHORNAME = "$notification.author$"
    NOTIFICATIONCOMMENT = "$notification.comment$"
    HOSTDISPLAYNAME = "$host.display_name$"
    SERVICEDISPLAYNAME = "$service.display_name$"
    USEREMAIL = "$user.email$"
  }
}

object CheckCommand "raid" {
  import "plugin-check-command"
  command = [PluginDir + "/check_raid.pl" ]
}

object CheckCommand "ceph" {
  import "plugin-check-command"
  command = [PluginDir + "/check-ceph-dash.py" ]

  arguments = {
    "-u" = {
      value = "$cd_url$"
      description = "URL where ceph-dash runs."
    }
  }

  vars.cd_url = "http://127.0.0.1:5000"
}

object CheckCommand "ipmi" {
  import "plugin-check-command"
  command = [PluginDir + "/check_ipmi_sensor" ]

  arguments = {
    "-H" = {
      value = "$my_ipmi_ip$"
      description = "IP of the IPMI to check"
      required = true
    }
    "-f" = {
      value = "$cfg_file$"
      description = "Path to freeipmi config file"
    }
  }

  vars.cfg_file = "/etc/icinga2/freeipmi.conf"
  vars.my_ipmi_ip = "$ipmi_ip$"
}

object CheckCommand "smartSOS" {
  import "plugin-check-command"
  command = [PluginDir + "/check_smartvalues" ]

  arguments = {
    "-d" = {
      value = "$my_device$"
      description = "Device to check"
      required = true
    }
    "-db" = {
      value = "$db_file$"
      description = "Path to smart database file"
    }
    "-c" = {
      value = "$cfg_file$"
      description = "Path to smart config file"
    }
    "-pd" = {
      value = "-pd"
      skip_key = true
    }
    "-s" = {
      value = "-s"
      skip_key = true
    }
  }

  vars.cfg_file = "/etc/icinga2/check_smartvalues.cfg.json"
  vars.db_file = "/etc/icinga2/check_smartvalues.db.json"
  vars.my_device = "$device$"
}

object CheckCommand "power" {
  import "plugin-check-command"
  command = [PluginDir + "/check_power.py" ]

  arguments = {
    "-h" = {
      value = "$my_ip$"
      description = "Device to check"
      required = true
      skip_key = true
      order = 2
    }
    "-s" = {
      value = "$my_statefile$"
      description = "Path to state file for historical data"
      required = true
      order = 1
    }
    "--debug" = {
      value = "--debug"
      skip_key = true
    }
  }
  vars.my_ip = "$ip$"
  vars.my_statefile = "$statefile$"
}

object CheckCommand "ib-host" {
  import "plugin-check-command"
  command = [PluginDir + "/check_ib" ]

  arguments = {
    "--check-host" = {
      value = "$my_host$"
      description = "Host to check"
      required = true
    }
    "--netfile" = {
      value = "$my_netfile$"
      description = "Path to state file for historical data"
      required = true
    }
    "--clear" = {
      value = "--clear"
      skip_key = true
    }
  }
  vars.my_host = "$host$"
  vars.my_netfile = "$netfile$"
}

object CheckCommand "ib-net" {
  import "plugin-check-command"
  command = [PluginDir + "/check_ib" ]

  arguments = {
    "--netfile" = {
      value = "$my_netfile$"
      description = "Path to state file for historical data"
      required = true
    }
    "--check-net" = {
      value = "--check-net"
      skip_key = true
    }
  }
  vars.my_netfile = "$netfile$"
}
