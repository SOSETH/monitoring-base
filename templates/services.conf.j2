/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */
{% for item in icinga_checks|matching('disk .*') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "disk"

  vars.disk_partitions = "{{ item | regex_replace('^disk (.*)$', '\\1')}}"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('iostat .*') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "iostat"
  vars.iostat_disk = "{{ item | regex_replace('^iostat (.*)$', '\\1')}}"
  vars.iostat_wtps = {{ icinga_iostat_tpsw }}
  vars.iostat_ctps = {{ icinga_iostat_tpsc }}
  vars.iostat_wread = {{ icinga_iostat_readw }}
  vars.iostat_cread = {{ icinga_iostat_readc }}
  vars.iostat_wwrite = {{ icinga_iostat_writew }}
  vars.iostat_cwrite = {{ icinga_iostat_writec }}

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('smart .*') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "smartSOS"
  vars.device = "{{ item | regex_replace('^smart (.*)$', '\\1')}}"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('sensors .*') %}
{% set item_name=item|regex_replace('^sensors (.*)$', '\\1') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "sensor"
  vars.my_sensor = "{{ (sensors|selectattr('name', 'equalto', item_name)|map(attribute='sensor')|list)[0] }}"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('raid') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "raid"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('ceph') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "ceph"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('ipmi .*')|list %}
{% set item_name=item|regex_replace('^ipmi (.*)$', '\\1') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "ipmi"

  vars.ipmi_ip = "{{ (ipmi_hosts|selectattr('name', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
  assign where host.name == "{{ item_name }}"
}
{% endfor %}

{% for item in icinga_checks|matching('https .*')|list %}
{% set item_name=item|regex_replace('^https (.*)$', '\\1') %}
/* The check_http check is from the Nagios era, aka when people didn't yet
 * have nice things. It still carries the spirit of it's time and has the
 * slightly retarded property of swallowing it's performance data when you
 * check the certificate for expiry. Therefore we have to use it twice...
 */
apply Service "https {{ ansible_fqdn }}" {
  import "generic-service"

  check_command = "http"
  check_interval = 1h

  vars.http_pagesize = "{{ (websites|selectattr('name', 'equalto', item_name)|map(attribute='minsize')|list)[0] }}"
  vars.http_vhost = "{{ item_name }}"
  vars.http_extendedperfdata = "true"
  vars.http_onredirect = "follow"
  vars.http_certificate = "{{ (websites|selectattr('name', 'equalto', item_name)|map(attribute='ssldays')|list)[0] }}"
  vars.http_ssl = "true"
  vars.http_sni = "true"

  assign where host.name == "{{ item_name }}"
}
{% endfor %}

{% for item in icinga_checks|matching('http .*')|list %}
{% set item_name=item|regex_replace('^http (.*)$', '\\1') %}
apply Service "http {{ ansible_fqdn }}" {
  import "generic-service"

  check_command = "http"
  check_interval = {{ (websites|selectattr('name', 'equalto', item_name)|map(attribute='t')|list)[0] }}

  vars.http_pagesize = "{{ (websites|selectattr('name', 'equalto', item_name)|map(attribute='minsize')|list)[0] }}"
  vars.http_vhost = "{{ item_name }}"
  vars.http_extendedperfdata = "true"
  vars.http_onredirect = "follow"
{% if (websites|selectattr('name', 'equalto', item_name)|map(attribute='ssl')|list)[0] == "true" %}
  vars.http_ssl = "true"
  vars.http_sni = "true"
{% endif %}
  assign where host.name == "{{ item_name }}"
}
{% endfor %}

{% for item in icinga_checks|matching('power .*')|list %}
{% set item_name=item|regex_replace('^power (.*)$', '\\1') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "power"

  vars.ip = "{{ (power_strips|selectattr('name', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
  vars.statefile = "/tmp/pwr_{{ item_name }}"
  assign where host.name == "{{ item_name }}"
}
{% endfor %}

{% for item in icinga_checks|matching('infiniband .*')|list %}
{% set item_name=item|regex_replace('^infiniband (.*)$', '\\1') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "ib-host"

  vars.host = "{{ (infiniband|selectattr('name', 'equalto', item_name)|map(attribute='name')|list)[0] }}"
  vars.netfile = "/etc/icinga2/ib-netfile.yml"

  assign where host.name == "{{ item_name }}"
}
{% endfor %}

{% for item in icinga_checks|matching('infiniband-net.*')|list %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "ib-net"
  vars.netfile = "/etc/icinga2/ib-netfile.yml"

  assign where host.name == NodeName
}
{% endfor %}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"

  vars.procs_warning = "{{ icinga_procs_warn }}"
  vars.procs_critical = "{{ icinga_procs_crit }}"
  assign where host.name == NodeName
}

apply Service "users" {
  import "generic-service"

  check_command = "users"

  assign where host.name == NodeName
}

apply Service "mem" {
  import "generic-service"

  check_command = "mem"
  vars.mem_used = true
  vars.mem_cache = true
  vars.mem_warning = 80
  vars.mem_critical = 95

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service"
  check_command = "load"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  /*vars.backup_downtime = "02:00-03:00"*/
  vars.load_wload1 = "{{ icinga_load_wload1 }}"
  vars.load_wload5 = "{{ icinga_load_wload5 }}"
  vars.load_wload15 = "{{ icinga_load_wload15 }}"
  vars.load_cload1 = "{{ icinga_load_cload1 }}"
  vars.load_cload5 = "{{ icinga_load_cload5 }}"
  vars.load_cload15 = "{{ icinga_load_cload15 }}"

  assign where host.name == NodeName
}
