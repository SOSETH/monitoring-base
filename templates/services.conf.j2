/*
 * Service apply rules.
 *
 * The CheckCommand objects `ping4`, `ping6`, etc
 * are provided by the plugin check command templates.
 * Check the documentation for details.
 *
 * Tip: Use `icinga2 object list --type Service` to
 * list all service objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */
{% for item in icinga_checks|matching('disk .*') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "disk"

  vars.disk_partitions = "{{ item | regex_replace('^disk (.*)$', '\\1')}}"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('iostat .*') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "iostat"
  vars.iostat_disk = "{{ item | regex_replace('^iostat (.*)$', '\\1')}}"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('raid') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "raid"

  assign where host.name == NodeName
}
{% endfor %}

{% for item in icinga_checks|matching('ceph') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "ceph"

  assign where host.name == NodeName
}
{% endfor %}
{% for item in icinga_checks|matching('ipmi .*')|list %}
{% set item_name=item|regex_replace('^ipmi (.*)$', '\\1') %}
apply Service "{{ item }}" {
  import "generic-service"

  check_command = "ipmi"

  vars.ipmi_ip = "{{ (ipmi_hosts|selectattr('name', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
  assign where host.name == "{{ item_name }}"
}
{% endfor %}

apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"

  assign where host.name == NodeName
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"

  assign where host.name == NodeName
}

apply Service "users" {
  import "generic-service"

  check_command = "users"

  assign where host.name == NodeName
}

apply Service "mem" {
  import "generic-service"

  check_command = "mem"
  vars.mem_used = true
  vars.mem_cache = true
  vars.mem_warning = 80
  vars.mem_critical = 95

  assign where host.name == NodeName
}

apply Service "load" {
  import "generic-service"
  check_command = "load"

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  /*vars.backup_downtime = "02:00-03:00"*/

  assign where host.name == NodeName
}
