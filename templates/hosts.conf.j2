/*
 * Host definitions with object attributes
 * used for apply rules for Service, Notification,
 * Dependency and ScheduledDowntime objects.
 *
 * Tip: Use `icinga2 object list --type Host` to
 * list all host objects after running
 * configuration validation (`icinga2 daemon -C`).
 */

/*
 * This is an example host based on your
 * local host's FQDN. Specify the NodeName
 * constant in `constants.conf` or use your
 * own description, e.g. "db-host-1".
 */


object Host "{{ ansible_fqdn }}" {
  /* Import the default host template defined in `templates.conf`. */
  import "generic-host"

  /* Specify the address attributes for checks e.g. `ssh` or `http`. */
  address = "{{ ansible_default_ipv4['address'] }}"
  {% if ansible_default_ipv6 %}
  {% if ansible_default_ipv6['address'].startswith('2001') %}
  {# Ansible sometimes thinks of link-local IPv6 address as globally reachable
     addresses. Filter that case. If you know a better way, feel free to fix #}
  address6 = "{{ ansible_default_ipv6['address'] }}"
  {% endif %}
  {% endif %}

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"
  vars.distribution = "{{ ansible_distribution }}"
  vars.distribution_release = "{{ ansible_distribution_release }}"

  /* Normal disk check */
{% for item in mon_icinga_checks|matching('disk .*') %}
  vars.disk["{{ item | regex_replace('^disk (.*)$', '\\1')}}"] = {
    disk_partitions = "{{ item | regex_replace('^disk (.*)$', '\\1')}}"
  } 
{% endfor %}
  /* iostat */
{% for item in mon_icinga_checks|matching('iostat .*') %}
  vars.iostat["{{ item | regex_replace('^iostat (.*)$', '\\1')}}"] = {
    iostat_disk = "{{ item | regex_replace('^iostat (.*)$', '\\1')}}",
    iostat_wtps = {{ mon_icinga_iostat_tpsw }},
    iostat_ctps = {{ mon_icinga_iostat_tpsc }},
    iostat_wread = {{ mon_icinga_iostat_readw }},
    iostat_cread = {{ mon_icinga_iostat_readc }},
    iostat_wwrite = {{ mon_icinga_iostat_writew }},
    iostat_cwrite = {{ mon_icinga_iostat_writec }}
  }
{% endfor %}
  /* SMART check for SATA disks */
{% for item in mon_icinga_checks|matching('smart .*') %}
  vars.sata["{{ item | regex_replace('^smart (.*)$', '\\1')}}"] = {
    device = "{{ item | regex_replace('^smart (.*)$', '\\1')}}"
  }
{% endfor %}
  /* SMART check for SAS disks */
{% for item in mon_icinga_checks|matching('sas .*') %}
  vars.sas["{{ item | regex_replace('^sas (.*)$', '\\1')}}"] = {
    device = "{{ item | regex_replace('^sas (.*)$', '\\1')}}"
  } 
{% endfor %}



  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
{% if 'mon_is_client' in hostvars %}
  {# Is this host a client? A client does not generate warnings if it becomes
     unreachable #}
  vars.is_client = {{ hostvars['mon_is_client'] }}
{% endif %}
}

{#
{% for item in mon_icinga_checks|matching('ipmi .*')|list %}
{% set item_name=item|regex_replace('^ipmi (.*)$', '\\1') %}
{% if item_name not in icinga_hosts_found|append('', 'icinga_hosts_found'+ansible_fqdn) %}
{% set icinga_hosts_found=icinga_hosts_found|append(item_name, 'icinga_hosts_found'+ansible_fqdn) %}
object Host "{{ item_name }}" {
  import "satellite-host"
  check_command = "cluster-zone"

  /* Specify the address attributes for checks e.g. `ssh` or `http`. */
  address = "{{ hostvars[item_name]['ansible_default_ipv4']['address'] }}"
  {% if hostvars[item_name]['ansible_default_ipv6'] %}
  {% if hostvars[item_name]['ansible_default_ipv6']['address'].startswith('2001') %}
  address6 = "{{ hostvars[item_name]['ansible_default_ipv6']['address'] }}"
  {% endif %}
  {% endif %}

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
}
{% endif %}
{% endfor %}

{% for item in mon_icinga_checks|matching('http .*')|list %}
{% set item_name=item|regex_replace('^http (.*)$', '\\1') %}
{% if item_name not in icinga_hosts_found|append('', 'icinga_hosts_found'+ansible_fqdn) %}
{% set icinga_hosts_found=icinga_hosts_found|append(item_name, 'icinga_hosts_found'+ansible_fqdn) %}

{% if (item_name in groups['mon-server']) or (item_name in groups['mon-client']) %}
object Host "{{ item_name }}" {
  import "satellite-host"
  check_command = "cluster-zone"

  /* Specify the address attributes for checks e.g. `ssh` or `http`. */
  address = "{{ hostvars[item_name]['ansible_default_ipv4']['address'] }}"
  {% if hostvars[item_name]['ansible_default_ipv6'] %}
  {% if hostvars[item_name]['ansible_default_ipv6']['address'].startswith('2001') %}
  address6 = "{{ hostvars[item_name]['ansible_default_ipv6']['address'] }}"
  {% endif %}
  {% endif %}

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
}
{% else %}
// Dummy host for website
object Host "{{ item_name }}" {
  import "generic-host"
  address = "{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='addr')|list)[0] }}"
}
{% endif %}
{% endif %}
{% endfor %}

{% for item in mon_icinga_checks|matching('power .*')|list %}
{% set item_name=item|regex_replace('^power (.*)$', '\\1') %}
{% if item_name not in icinga_hosts_found|append('', 'icinga_hosts_found'+ansible_fqdn) %}
{% set icinga_hosts_found=icinga_hosts_found|append(item_name, 'icinga_hosts_found'+ansible_fqdn) %}
// Dummy host for powerstrip
object Host "{{ item_name }}" {
  import "generic-host"
  address = "{{ (mon_check_power_strips|selectattr('name', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
}

{% endif %}
{% endfor %}

#}
