/* Managed by ansible, do not edit! This file is generated in monitoring-base
 * for each host, stored on the node executing ansible and then uploaded to all
 * master nodes */

object Host "{{ ansible_fqdn }}" {
{% if 'mon-server' in group_names %}
  /* Import the default host template defined in `templates.conf`. */
  import "mon-server-host"
{% else %}
  /* Import the default host template defined in `templates.conf`. */
  import "generic-host"
{% endif %}

  /* Specify the address attributes for checks e.g. `ssh` or `http`. */
  address = "{{ ansible_default_ipv4['address'] }}"
  {% if ansible_default_ipv6 %}
  {% if ansible_default_ipv6['address'].startswith('2001') %}
  {# Ansible sometimes thinks of link-local IPv6 address as globally reachable
     addresses. Filter that case. If you know a better way, feel free to fix #}
  address6 = "{{ ansible_default_ipv6['address'] }}"
  {% endif %}
  {% endif %}

  /* Set custom attribute `os` for hostgroup assignment in `groups.conf`. */
  vars.os = "Linux"
  vars.distribution = "{{ ansible_distribution }}"
  vars.distribution_release = "{{ ansible_distribution_release }}"
  /* Normal checks */
{% for item in mon_icinga_checks|matching('apt') %}
  vars.apt = {
    notify = false
  }
{% endfor %}
  /* Normal disk check */
{% for item in mon_icinga_checks|matching('disk .*') %}
{% set disk=(item|regex_replace('^disk (.*)$', '\\1')) %}
  vars.disk["{{ disk }}"] = {
    /* Careful: This is actually the mountpoint! */
    disk_partitions = "{{ disk }}",
{% if disk in mon_icinga_disk_thresholds.keys() %}
    disk_wfree = "{{ mon_icinga_disk_thresholds[disk]['wfree'] }}%",
    disk_cfree = "{{ mon_icinga_disk_thresholds[disk]['cfree'] }}%"
{% else %}
    disk_wfree = "{{ mon_icinga_disk_wfree_default }}%",
    disk_cfree = "{{ mon_icinga_disk_cfree_default }}%"
{% endif %}
  }
{% endfor %}
  /* iostat */
{% for item in mon_icinga_checks|matching('iostat .*') %}
  vars.iostat["{{ item | regex_replace('^iostat (.*)$', '\\1')}}"] = {
    iostat_disk = "{{ item | regex_replace('^iostat (.*)$', '\\1') | regex_replace('^/dev/(.*)$', '\\1') }}",
    iostat_wtps = {{ mon_icinga_iostat_tpsw }},
    iostat_ctps = {{ mon_icinga_iostat_tpsc }},
    iostat_wread = {{ mon_icinga_iostat_readw }},
    iostat_cread = {{ mon_icinga_iostat_readc }},
    iostat_wwrite = {{ mon_icinga_iostat_writew }},
    iostat_cwrite = {{ mon_icinga_iostat_writec }}
  }
{% endfor %}
  /* SMART check for SATA disks */
{% for item in mon_icinga_checks|matching('smart .*') %}
  vars.sata["{{ item | regex_replace('^smart (.*)$', '\\1')}}"] = {
    device = "{{ item | regex_replace('^smart (.*)$', '\\1')}}"
  }
{% endfor %}
  /* SMART check for SAS disks */
{% for item in mon_icinga_checks|matching('sas .*') %}
  vars.sas["{{ item | regex_replace('^sas (.*)$', '\\1')}}"] = {
    device = "{{ item | regex_replace('^sas (.*)$', '\\1')}}"
  }
{% endfor %}
  /* Sensor checks for lm-sensors */
{% for item in mon_icinga_checks|matching('sensors .*') %}
{% set item_name=item|regex_replace('^sensors (.*)$', '\\1') %}
  vars.sensor["{{ item_name }}"] = {
    my_sensor = "{{ (mon_check_sensors|selectattr('name', 'equalto', item_name)|map(attribute='sensor')|list)[0] }}"
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('raid') %}
  /* Check mdadmin raid */
  vars.raid = "true"
{% endfor %}
{% for item in mon_icinga_checks|matching('ceph$') %}
  /* Check CEPH health */
  vars.ceph = "true"
{% endfor %}
{% for item in mon_icinga_checks|matching('ceph-new') %}
  /* Check CEPH health (>= CEPH Luminous) */
  vars.cephnew = "true"
{% endfor %}
{% for item in mon_icinga_checks|matching('ipmi .*') %}
  /* Check somebody's IPMI */
{% set item_name=item|regex_replace('^ipmi (.*)$', '\\1') %}
  vars.ipmi["{{ item_name }}"] = {
    ipmi_ip = "{{ (mon_check_ipmi_hosts|selectattr('name', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
    parent = ["{{ item_name }} from master"]
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('snmp .*') %}
  /* Check something via SNMP */
{% set item_name=item|regex_replace('^snmp (.*)$', '\\1') %}
  vars.snmp["{{ item_name }}"] = {
    snmp_address = "{{ (mon_check_snmp_hosts|selectattr('name', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
    snmp_oid = "{{ (mon_check_snmp_hosts|selectattr('name', 'equalto', item_name)|map(attribute='oid')|list)[0] }}"
    snmp_version = "2c"
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('https .*') %}
  /* Check website (https part )*/
{% set item_name=item|regex_replace('^https (.*)$', '\\1') %}
  vars.https["{{ item_name }}"] = {
    http_pagesize = "{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='minsize')|list)[0] }}",
    http_vhost = "{{ item_name }}",
    http_address = "{{ item_name }}",
    http_extendedperfdata = "true",
    http_onredirect = "follow",
    http_certificate = "{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='ssldays')|list)[0] }}",
    http_ssl = "true",
    http_sni = "true",
{% if (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='auth')|list)[0] == "true" %}
    http_auth_pair = "{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='user')|list)[0] }}:{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='password')|list)[0] }}",
{% endif %}
    http_certificate = "10"
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('http .*') %}
  /* Check website (http part )*/
{% set item_name=item|regex_replace('^http (.*)$', '\\1') %}
  vars.http["{{ item_name }}"] = {
    http_pagesize = "{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='minsize')|list)[0] }}",
    http_vhost = "{{ item_name }}",
    http_address = "{{ item_name }}",
    http_extendedperfdata = "true",
{% if (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='auth')|list)[0] == "true" %}
    http_auth_pair = "{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='user')|list)[0] }}:{{ (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='password')|list)[0] }}",
{% endif %}
{% if (mon_check_websites|selectattr('name', 'equalto', item_name)|map(attribute='ssl')|list)[0] == "true" %}
    http_ssl = "true",
    http_sni = "true",
{% endif %}
    http_onredirect = "follow"
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('power .*') %}
  /* Check an e3meter */
{% set item_name=item|regex_replace('^power (.*)$', '\\1') %}
  vars.power["{{ item_name }}"] = {
    ip = "{{ (mon_check_power_strips|selectattr('name', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
    statefile = "/tmp/pwr_{{ item_name }}"
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('infiniband .*')|list %}
  /* Check infiniband metrics */
{% set item_name=item|regex_replace('^infiniband (.*)$', '\\1') %}
  vars.ib["{{ item_name }}"] = {
    host = "{{ (mon_check_infiniband|selectattr('name', 'equalto', item_name)|map(attribute='name')|list)[0] }}"
    netfile = "/etc/icinga2/ib-netfile.yml"
{% if (mon_check_infiniband|selectattr('name', 'equalto', item_name)|map(attribute='name')|list)[0] in groups['mon-client'] or
   (mon_check_infiniband|selectattr('name', 'equalto', item_name)|map(attribute='name')|list)[0] in groups['mon-server'] %}
    parent = ["{{ (mon_check_infiniband|selectattr('name', 'equalto', item_name)|map(attribute='name')|list)[0] }} from master"]
{% endif %}
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('infiniband-net .*')|list %}
  /* Check infiniband network */
  vars.ib-net["{{ item|regex_replace('^infiniband-net (.*)$', '\\1') }}"] = {
    netfile = "/etc/icinga2/ib-netfile.yml"
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('swport .*')|list %}
  /* Check switch interface via SNMP */
{% set item_name=item|regex_replace('^swport (.*)$', '\\1') %}
  vars.swport["{{ item_name }}"] = {
    ip = "{{ (mon_check_swport|selectattr('if', 'equalto', item_name)|map(attribute='ip')|list)[0] }}"
    interface = "{{ item_name|replace("$", "$$") }}"
  }
{% endfor %}
{% for item in mon_icinga_checks|matching('ups.*')|list %}
  /* Check apcupsd */
  vars.ups = "true"
{% endfor %}
  /* Thresholds for number of processes */
  vars.procs = {
    procs_warning = "{{ mon_icinga_procs_warn }}",
    procs_critical = "{{ mon_icinga_procs_crit }}"
  }
  /* Thresholds for load levels */
  vars.load = {
    load_wload1 = "{{ mon_icinga_load_wload1 }}"
    load_wload5 = "{{ mon_icinga_load_wload5 }}"
    load_wload15 = "{{ mon_icinga_load_wload15 }}"
    load_cload1 = "{{ mon_icinga_load_cload1 }}"
    load_cload5 = "{{ mon_icinga_load_cload5 }}"
    load_cload15 = "{{ mon_icinga_load_cload15 }}"
  }

  /* Define notification mail attributes for notification apply rules in `notifications.conf`. */
  vars.notification["mail"] = {
    /* The UserGroup `icingaadmins` is defined in `users.conf`. */
    groups = [ "icingaadmins" ]
  }
{% if 'mon_is_client' in hostvars %}
  {# Is this host a client? A client does not generate warnings if it becomes
     unreachable #}
  vars.is_client = {{ hostvars['mon_is_client'] }}
{% endif %}
}
