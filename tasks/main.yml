---
  - name: Add Icinga2 repository key
    when: mon_icingarepo_enabled|bool
    become: True
    apt_key: data="{{ lookup('file', 'icinga.key') }}" state=present

  - name: Add Icinga2 repository
    when: mon_icingarepo_enabled|bool
    become: True
    apt_repository: repo='deb http://packages.icinga.com/debian icinga-{{ mon_ansible_distribution_release }} main' state=present
    register: repochanged

  - name: Explicitly refresh apt cache
    become: True
    apt: update_cache=yes
    when: mon_icingarepo_enabled and repochanged.changed

  - name: Install monitoring client packages
    become: True
    apt:
      name:
        - icinga2
        - sysstat
        - bc
        - sudo
        - prometheus-node-exporter # sos-monitoring-tools if < Stretch
        - rsyslog
        - monitoring-plugins
        - check-iostat # sos-monitoring-tools
        - check-mem # sos-monitoring-tools
        - check-raid # sos-monitoring-tools
        - nagios-plugins
      state: latest

  - name: Enable default services
    set_fact:
      mon_icinga_checks: ["apt"]

  - name: Allow user nagios to execute some checks with sudo
    become: True
    lineinfile:
      dest: "/etc/sudoers"
      state: present
      regexp: '^nagios'
      line: 'nagios ALL=(ALL) NOPASSWD: /usr/sbin/smartctl, /usr/bin/ceph status --format json-pretty, /sbin/dmsetup status, /sbin/dmsetup status --noflush, /usr/lib/nagios/plugins/check_ib, /usr/lib/nagios/plugins/check_lsi_raid, /usr/sbin/storcli'

  - name: (prometheus) Initialize list of running exporters
    set_fact:
      mon_prometheus_exporters: ["node"]
    when: mon_enable_prometheus|bool

  - name: (prometheus) Load node exporter version
    check_mode: False
    when: mon_enable_prometheus|bool
    shell: "prometheus-node-exporter --version 2>&1 | awk '{print $3}' | head -n1"
    register: nodexpv
    changed_when: False

  - name: (prometheus) Create local metrics dir to shut up the node exporter
    become: True
    file: path=/var/lib/prometheus/node-exporter owner=prometheus group=root mode=0755 state=directory
    when: mon_enable_prometheus|bool

  - name: (prometheus) Handle SNMP exporter
    when: mon_enable_prometheus_snmp|bool
    include_tasks: pm-snmp.yml

  - name: (prometheus) Init custom exporters
    set_fact:
      prometheus_custom_index: 0

  - name: (prometheus) Handle custom exporters
    include_tasks: pm-custom.yml
    with_items: "{{ mon_prometheus_extra_exporters }}"

  - name: (prometheus) Disable APT check
    when: mon_enable_prometheus|bool and not mon_prometheus_apt|bool
    become: True
    service:
      name: prometheus-node-exporter-apt.timer
      state: stopped
      enabled: no
    failed_when: False

  - name: (prometheus) Remove APT state
    when: mon_enable_prometheus|bool and not mon_prometheus_apt|bool
    become: True
    file:
      path: /var/lib/prometheus/node-exporter/apt.prom
      state: absent
    failed_when: False

  - name: Actually enable sysstat
    become: True
    template: src=sysstat.j2 dest=/etc/default/sysstat
    notify: restart sysstat

  - name: Configure prometheus node exporter
    become: True
    template: src=prometheus-node-exporter.j2 dest=/etc/default/prometheus-node-exporter owner=root group=root mode=0644
    notify: restart prometheus nexp
    when: mon_enable_prometheus|bool

  - name: Build haproxy SSL certificate (prometheus)
    become: True
    shell: cat /etc/haproxy/pm-sv.crt /etc/haproxy/pm-sv.key > /etc/haproxy/pm-sv-full.pem
    changed_when: False
    notify: restart haproxy
    when: mon_enable_prometheus|bool

  - name: Build haproxy SSL certificate (syslog)
    become: True
    shell: cat /etc/haproxy/ls-cl.crt /etc/haproxy/ls-cl.key > /etc/haproxy/ls-c-full.pem
    changed_when: False
    notify: restart haproxy
    when: mon_enable_syslog_forwarding|bool

  - name: Configure rsyslog to forward log messages
    become: True
    template: src=rsyslog-remote.conf.j2 dest=/etc/rsyslog.d/40-syslog-client.conf owner=root group=root
    notify: restart syslog
    when: mon_enable_syslog_forwarding|bool

  - name: Ensure rsyslog log forwarding is disabled
    become: True
    file: path=/etc/rsyslog.d/40-syslog-client.conf state=absent
    notify: restart syslog
    when: not mon_enable_syslog_forwarding

  - name: (mdadm) Detect mdadm raids
    shell: cat /proc/mdstat | grep active | awk '{print $1}'
    register: mdout
    failed_when: False
    changed_when: False
    check_mode: False

  - name: (mdadm) Append mdadm raids to list of checks
    set_fact: mon_icinga_checks="{{ mon_icinga_checks }} + ['raid']"
    when: mdout.rc == 0 and mdout.stdout != ""

  - name: (ceph) Detect if this node is a ceph monitor
    shell: ps ax | grep ceph-mon | grep -v grep
    register: cephout
    changed_when: False
    failed_when: False
    check_mode: False

  - name: (ceph) Include ceph handler
    include_tasks: ceph.yml
    when: cephout.stdout != ""

  - name: (ipmi) Include ipmi handler
    include_tasks: ipmi.yml
    when: mon_check_ipmi_hosts != False

  - name: (power) Include powerstrip handler
    include_tasks: power.yml
    when: mon_check_power_strips != False

  - name: (ib) Include infiniband handler
    include_tasks: ib.yml
    when: mon_check_infiniband != False

  - name: Include disk-related handlers
    include_tasks: disk.yml

  - name: (megaraid) Check for Broadcom Megaraid device node
    become: True
    stat:
      path: /dev/megaraid_sas_ioctl_node
    register: megaraid

  - name: (megaraid) Include Megaraid handler
    include_tasks: megaraid.yml
    when: megaraid.stat.exists and not mon_skip_megaraid

  - name: (http) Include website handler
    include_tasks: websites.yml
    when: mon_check_websites != False

  - name: (sensors) Include sensor handler
    include_tasks: sensors.yml
    when: mon_check_sensors != False

  - name: (ups) Check for apcupsd
    become: True
    stat: path=/etc/apcupsd/apcupsd.conf
    register: ups
    changed_when: False

  - name: (ups) Include ups handler
    include_tasks: ups.yml
    when: ups.stat.exists

  - name: (swport) Include switch port handler
    include_tasks: swport.yml
    when: mon_check_swport != False

  - name: (snmp) Include snmp handler
    include_tasks: snmp.yml
    when: mon_check_snmp_hosts != False

  - name: (mysql) Include mysql handler
    include_tasks: mysql.yml
    when: mon_check_mysql != []

  - name: (pgsql) Include postgresql handler
    include_tasks: pgsql.yml
    when: mon_check_pgsql != []

  - name: (ldap) Include ldap handler
    include_tasks: ldap.yml
    when: mon_check_ldap != []

  - name: Create icinga config files
    become: True
    template: src={{ item }}.j2 dest=/etc/icinga2/conf.d/{{ item }} owner=root group=root mode=0644
    notify: restart icinga
    with_items:
      - commands.conf

  - name: Ensure fetch directorties exist
    file:
      path: "{{ item }}"
      state: directory
    with_items:
      - fetch/icc
      - fetch/vars
    check_mode: False
    delegate_to: localhost

  - name: Create icinga host definitions
    template:
      src: hosts.conf.j2
      dest: fetch/icc/{{ ansible_fqdn }}.conf
    check_mode: False
    delegate_to: localhost

  - name: Create icinga host variable definitions
    template:
      src: vars.conf.j2
      dest: fetch/vars/{{ ansible_fqdn }}.yml
    check_mode: False
    delegate_to: localhost

  - name: Kill redundant default config files
    become: True
    file: path={{ item }} state=absent
    with_items:
      - /etc/icinga2/conf.d/apt.conf
      - /etc/icinga2/conf.d/hosts.conf
      - /etc/icinga2/conf.d/services.conf

  - debug: msg="{{ mon_prometheus_exporters }}"
    when: mon_enable_prometheus|bool

  - name: Create TLS tunnel haproxy config
    become: True
    template: src=haproxy-dropin.j2 dest=/etc/haproxy/conf.d/40-syslog-client.conf owner=root group=root
    notify: restart haproxy
    when: mon_enable_syslog_forwarding or mon_enable_prometheus

  - name: Ensure that services are started and enabled
    set_fact:
      mon_services_to_enable:
        - sysstat

  - name: Ensure that services are started and enabled (prometheus)
    become: True
    set_fact:
      mon_services_to_enable: "{{ mon_services_to_enable }} + [ '{{ item }}' ]"
    with_items:
      - haproxy
      - prometheus-node-exporter
    when: mon_enable_prometheus|bool

  - name: Ensure that services are started and enabled (syslog)
    become: True
    set_fact:
      mon_services_to_enable: "{{ mon_services_to_enable }} + [ '{{ item }}' ]"
    with_items:
      - haproxy
      - rsyslog
    when: mon_enable_syslog_forwarding|bool

  - name: Ensure that services are started and enabled
    become: True
    service:
      name: "{{ item }}"
      state: started
      enabled: yes
    with_items: "{{ mon_services_to_enable }}"
