---
  - name: Disable IPv6 for APT since debmon has some issues with it
    become: True
    template: src=noipv6.j2 dest=/etc/apt/apt.conf.d/99-apt-ipv4-only owner=root group=root mode=0644

  - name: Add debmon repository key
    become: True
    apt_key: data="{{ lookup('file', 'debmon.key') }}" state=present state=present

  - name: Add debmon repository
    become: True
    apt_repository: repo='deb http://debmon.org/debmon debmon-{{ ansible_distribution_release }} main' state=present
    register: repochanged

  - name: Explicitly refresh apt cache
    become: True
    apt: update_cache=yes
    when: repochanged.changed

  - name: Install monitoring client packages
    become: True
    apt: name={{ item }} state=present update_cache=yes cache_valid_time=1800
    with_items:
      - icinga2
      - sysstat
      - bc
      - prometheus-node-exporter
    when: ansible_distribution_release != 'jessie'

  - name: Install monitoring client packages
    become: True
    apt: name={{ item }} state=present update_cache=yes cache_valid_time=1800
    with_items:
      - icinga2
      - sysstat
      - bc
      - daemon
    when: ansible_distribution_release == 'jessie'

  - name: (prometheus) Check prometheus-node-exporter version
    become: True
    shell: apt-cache policy prometheus-node-exporter | grep Install | head -n1 | awk '{print $2}'
    register: swversion
    failed_when: False
    changed_when: False
    when: ansible_distribution_release == 'jessie' and mon_enable_prometheus

  - name: (prometheus) Copy prometheus-node-exporter package
    become: True
    copy: src=prometheus-node-exporter_0.13.0+ds-1_amd64.deb dest=/tmp/prometheus-node-exporter_0.13.0+ds-1_amd64.deb owner=root group=root mode=0644
    when: ansible_distribution_release == 'jessie' and swversion.stdout != "0.13.0+ds-1" and mon_enable_prometheus

  - name: (prometheus) Install prometheus-node-exporter package
    become: True
    command: dpkg -i --force-overwrite /tmp/prometheus-node-exporter_0.13.0+ds-1_amd64.deb
    when: ansible_distribution_release == 'jessie' and swversion.stdout != "0.13.0+ds-1" and mon_enable_prometheus

  - name: Enable default services
    set_fact:
      mon_icinga_checks: ["apt"]

  - name: (prometheus) Initialize list of running exporters
    set_fact:
      mon_prometheus_exporters: ["node"]
    when: mon_enable_prometheus

  - name: (prometheus) Create local metrics dir to shut up the node exporter
    become: True
    file: path=/var/lib/prometheus/node-exporter owner=prometheus group=root mode=0755 state=directory
    when: mon_enable_prometheus

  - name: Actually enable sysstat
    become: True
    template: src=sysstat.j2 dest=/etc/default/sysstat
    notify: restart sysstat

  - name: Configure prometheus node exporter
    become: True
    template: src=prometheus-node-exporter.j2 dest=/etc/default/prometheus-node-exporter owner=root group=root mode=0644
    notify: restart prometheus nexp
    when: mon_enable_prometheus

  - name: Build haproxy SSL certificate (prometheus)
    become: True
    shell: cat /etc/haproxy/pm-sv.crt /etc/haproxy/pm-sv.key > /etc/haproxy/pm-sv-full.pem
    changed_when: False
    notify: restart haproxy
    when: mon_enable_prometheus

  - name: Build haproxy SSL certificate (syslog)
    become: True
    shell: cat /etc/haproxy/ls-cl.crt /etc/haproxy/ls-cl.key > /etc/haproxy/ls-c-full.pem
    changed_when: False
    notify: restart haproxy
    when: mon_enable_syslog_forwarding

  - name: Configure rsyslog to forward log messages
    become: True
    template: src=rsyslog-remote.conf.j2 dest=/etc/rsyslog.d/40-syslog-client.conf owner=root group=root
    notify: restart syslog
    when: mon_enable_syslog_forwarding

  - name: (mdadm) Detect mdadm raids
    check_mode: False
    shell: cat /proc/mdstat | grep active | awk '{print $1}'
    register: mdout
    failed_when: False
    changed_when: False

  - name: (mdadm) Append mdadm raids to list of checks
    set_fact: mon_icinga_checks="{{mon_icinga_checks}} + ['raid']"
    when: mdout.rc == 0 and mdout.stdout != ""

  - name: (disk) Detect mounted volumes
    set_fact:
      disk_item: "disk {{ item.device }}"
    with_items: "{{ ansible_mounts|attr_in('mount', mon_icinga_valid_mounts) }}"
    register: diskappend

  - name: (disk) Append detected mountpoints to list of checks
    set_fact: mon_icinga_checks="{{mon_icinga_checks}} + {{ diskappend.results | map(attribute='ansible_facts.disk_item') | list }}"

  - name: (iostat) Enumerate physical disks in this system
    set_fact:
      disk_item: "iostat {{ item }}"
    with_items: "{{ ansible_devices.keys()|matching('[sva]d[a-z]') }}"
    register: pdiskappend

  - name: (iostat) Append detected disks to list of checks
    set_fact: mon_icinga_checks='{{mon_icinga_checks}} + {{ pdiskappend.results | map(attribute="ansible_facts.disk_item") | list }}'

  - name: (ceph) Detect if this node is a ceph monitor
    shell: ps ax | grep ceph-mon | grep -v grep
    register: cephout
    changed_when: False
    failed_when: False

  - name: (ceph) Include ceph handler
    include_tasks: ceph.yml
    when: cephout.stdout != ""

  - name: (ipmi) Include ipmi handler
    include_tasks: ipmi.yml
    when: mon_check_ipmi_hosts != False

  - name: (power) Include powerstrip handler
    include_tasks: power.yml
    when: mon_check_power_strips != False

  - name: (ib) Include infiniband handler
    include_tasks: ib.yml
    when: mon_check_infiniband != False

  - name: (smart) Include smart handler
    include_tasks: smart.yml
    when: mon_skip_smart == False

  - name: (sas) Include sas smart handler
    include_tasks: sas.yml
    when: mon_skip_smart == False

  - name: (http) Include website handler
    include_tasks: websites.yml
    when: mon_check_websites != False

  - name: (sensors) Include sensor handler
    include_tasks: sensors.yml
    when: mon_check_sensors != False

  - name: (ups) Check for apcupsd
    stat: path=/etc/default/apcupsd
    register: ups
    changed_when: False

  - name: (ups) Include ups handler
    include_tasks: ups.yml
    when: ups.stat.exists

  - name: (swport) Include switch port handler
    include_tasks: swport.yml
    when: mon_check_swport != False

  - name: Create icinga config files
    become: True
    template: src={{item }}.j2 dest=/etc/icinga2/conf.d/{{item }} owner=root group=root mode=0644
    notify: restart icinga
    with_items:
      - commands.conf

  - name: Create icinga host definitions
    template: src=hosts.conf.j2 dest=fetch/icc/{{ ansible_fqdn }}.conf
    delegate_to: localhost

  - name: Create icinga host variable definitions
    template: src=vars.conf.j2 dest=fetch/vars/{{ansible_fqdn}}.yml
    delegate_to: localhost

  - name: Kill redundant default config files
    become: True
    file: path={{item}} state=absent
    with_items:
      - /etc/icinga2/conf.d/apt.conf
      - /etc/icinga2/conf.d/hosts.conf
      - /etc/icinga2/conf.d/services.conf

  - name: Manually install a few checks from contrib
    become: True
    copy: src="{{ item }}" dest="/usr/lib/nagios/plugins/{{ item }}" owner=root group=root mode=0755
    notify: restart icinga
    with_items:
      - check_iostat
      - check_mem.pl
      - check_raid.pl

  - name: Ensure that services are started and enabled
    become: True
    service: name={{ item }} state=started enabled=yes
    with_items:
      - sysstat

  - name: Create TLS tunnel haproxy config
    become: True
    template: src=haproxy-dropin.j2 dest=/etc/haproxy/conf.d/40-syslog-client.conf owner=root group=root
    notify: restart haproxy
    when: mon_enable_syslog_forwarding or mon_enable_prometheus

  - name: Ensure that services are started and enabled (prometheus)
    become: True
    service: name={{ item }} state=started enabled=yes
    with_items:
      - haproxy
      - prometheus-node-exporter
    when: mon_enable_prometheus

  - name: Ensure that services are started and enabled (syslog)
    become: True
    service: name={{ item }} state=started enabled=yes
    with_items:
      - haproxy
      - rsyslog
    when: mon_enable_syslog_forwarding
